{
    "make_base_laplace": {
        "description": "Make a Measurement that adds noise from the laplace(`scale`) distribution to a scalar value.",
        "proof": "https://www.overleaf.com/read/brvrprjhrhwb",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Noise scale parameter of the laplace distribution."
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "Data type to be privatized.",
                "is_type": true
            }
        ],
        "ret": {"c_type": "FfiResult<AnyMeasurement *>"}
    },
    "make_base_vector_laplace": {
        "description": "Make a Measurement that adds noise from the multivariate laplace(`scale`) distribution to a vector value.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Noise scale parameter of the laplace distribution."
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "Data type to be privatized.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_gaussian": {
        "description": "Make a Measurement that adds noise from the gaussian(`scale`) distribution to a scalar value.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "noise scale parameter to the gaussian distribution"
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "data type to be privatized",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_vector_gaussian": {
        "description": "Make a Measurement that adds noise from the multivariate gaussian(`scale`) distribution to a vector value.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "T",
                "description": "noise scale parameter to the gaussian distribution"
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "data type to be privatized",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_geometric": {
        "description": "Make a Measurement that adds noise from the geometric(`scale`) distribution to a scalar value.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "QO",
                "description": "noise scale parameter to the geometric distribution"
            },
            {
                "name": "T",
                "c_type": "char *",
                "default": "i32",
                "description": "Data type to be privatized.",
                "is_type": true
            },
            {
                "name": "QO",
                "c_type": "char *",
                "description": "Data type of the sensitivity space.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_vector_geometric": {
        "description": "Make a Measurement that adds noise from the geometric(`scale`) distribution to a vector value.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "QO",
                "description": "noise scale parameter to the geometric distribution"
            },
            {
                "name": "T",
                "c_type": "char *",
                "default": "i32",
                "description": "Data type to be privatized.",
                "is_type": true
            },
            {
                "name": "QO",
                "c_type": "char *",
                "description": "Data type of the sensitivity space.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_constant_time_base_geometric": {
        "description": "Make a Measurement that adds noise from the geometric(`scale`) distribution to a scalar value.\n`lower` and `upper` are used to derive the max number of trials necessary when sampling from the geometric distribution.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "QO",
                "description": "noise scale parameter to the geometric distribution"
            },
            {
                "name": "lower",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Expected lower bound of data."
            },
            {
                "name": "upper",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Expected upper bound of data."
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "Data type to be privatized.",
                "is_type": true
            },
            {
                "name": "QO",
                "c_type": "char *",
                "description": "Data type of the sensitivity space.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_constant_time_base_vector_geometric": {
        "description": "Make a Measurement that adds noise from the geometric(`scale`) distribution to a vector value.\n`lower` and `upper` are used to derive the max number of trials necessary when sampling from the geometric distribution.",
        "args": [
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": "QO",
                "description": "noise scale parameter to the geometric distribution"
            },
            {
                "name": "lower",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Expected lower bound of data."
            },
            {
                "name": "upper",
                "c_type": "void *",
                "rust_type": "T",
                "description": "Expected upper bound of data."
            },
            {
                "name": "T",
                "c_type": "char *",
                "description": "Data type to be privatized.",
                "is_type": true
            },
            {
                "name": "QO",
                "c_type": "char *",
                "description": "Data type of the sensitivity space.",
                "is_type": true
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_base_stability": {
        "description": "Make a Measurement that implements a stability-based filtering and noising.",
        "args": [
            {
                "name": "n",
                "c_type": "unsigned int",
                "description": "Number of records in the input vector."
            },
            {
                "name": "scale",
                "c_type": "void *",
                "rust_type": {"root": "MI", "index": 0},
                "description": "Noise scale parameter."
            },
            {
                "name": "threshold",
                "c_type": "void *",
                "rust_type": {"root": "MI", "index": 0},
                "description": "Exclude counts that are less than this minimum value."
            },
            {
                "name": "MI",
                "c_type": "char *",
                "description": "Input metric.",
                "is_type": true,
                "hint": "SensitivityMetric"
            },
            {
                "name": "TIK",
                "c_type": "char *",
                "description": "Data type of input key- must be hashable/categorical.",
                "is_type": true
            },
            {
                "name": "TIC",
                "c_type": "char *",
                "description": "Data type of input count- must be integral.",
                "is_type": true,
                "default": "i32"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    },
    "make_shuffle_amplification": {
        "description": "Make a Measurement that estimates privacy usage under shuffle amplification.",
        "args": [
            {
                "name": "step_epsilon",
                "c_type": "double",
                "description": "Epsilon usage of each disjoint step."
            },
            {
                "name": "step_delta",
                "c_type": "double",
                "description": "Epsilon usage of each disjoint step."
            },
            {
                "name": "num_steps",
                "c_type": "unsigned int",
                "description": "Number of disjoint steps taken."
            },
            {
                "name": "MI",
                "c_type": "char *",
                "description": "input dataset metric",
                "is_type": true,
                "hint": "DatasetMetric"
            }
        ],
        "ret": {
            "c_type": "FfiResult<AnyMeasurement *>"
        }
    }
}
